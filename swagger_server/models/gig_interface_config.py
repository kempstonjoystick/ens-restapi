# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GigInterfaceConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, alias: str=None, admin: str=None, firewall_profile: str=None, ip_addr: str=None):  # noqa: E501
        """GigInterfaceConfig - a model defined in Swagger

        :param name: The name of this GigInterfaceConfig.  # noqa: E501
        :type name: str
        :param alias: The alias of this GigInterfaceConfig.  # noqa: E501
        :type alias: str
        :param admin: The admin of this GigInterfaceConfig.  # noqa: E501
        :type admin: str
        :param firewall_profile: The firewall_profile of this GigInterfaceConfig.  # noqa: E501
        :type firewall_profile: str
        :param ip_addr: The ip_addr of this GigInterfaceConfig.  # noqa: E501
        :type ip_addr: str
        """
        self.swagger_types = {
            'name': str,
            'alias': str,
            'admin': str,
            'firewall_profile': str,
            'ip_addr': str
        }

        self.attribute_map = {
            'name': 'name',
            'alias': 'alias',
            'admin': 'admin',
            'firewall_profile': 'firewall-profile',
            'ip_addr': 'ip-addr'
        }

        self._name = name
        self._alias = alias
        self._admin = admin
        self._firewall_profile = firewall_profile
        self._ip_addr = ip_addr

    @classmethod
    def from_dict(cls, dikt) -> 'GigInterfaceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gigInterfaceConfig of this GigInterfaceConfig.  # noqa: E501
        :rtype: GigInterfaceConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this GigInterfaceConfig.


        :return: The name of this GigInterfaceConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GigInterfaceConfig.


        :param name: The name of this GigInterfaceConfig.
        :type name: str
        """

        self._name = name

    @property
    def alias(self) -> str:
        """Gets the alias of this GigInterfaceConfig.


        :return: The alias of this GigInterfaceConfig.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias: str):
        """Sets the alias of this GigInterfaceConfig.


        :param alias: The alias of this GigInterfaceConfig.
        :type alias: str
        """

        self._alias = alias

    @property
    def admin(self) -> str:
        """Gets the admin of this GigInterfaceConfig.


        :return: The admin of this GigInterfaceConfig.
        :rtype: str
        """
        return self._admin

    @admin.setter
    def admin(self, admin: str):
        """Sets the admin of this GigInterfaceConfig.


        :param admin: The admin of this GigInterfaceConfig.
        :type admin: str
        """
        allowed_values = ["up", "down"]  # noqa: E501
        if admin not in allowed_values:
            raise ValueError(
                "Invalid value for `admin` ({0}), must be one of {1}"
                .format(admin, allowed_values)
            )

        self._admin = admin

    @property
    def firewall_profile(self) -> str:
        """Gets the firewall_profile of this GigInterfaceConfig.


        :return: The firewall_profile of this GigInterfaceConfig.
        :rtype: str
        """
        return self._firewall_profile

    @firewall_profile.setter
    def firewall_profile(self, firewall_profile: str):
        """Sets the firewall_profile of this GigInterfaceConfig.


        :param firewall_profile: The firewall_profile of this GigInterfaceConfig.
        :type firewall_profile: str
        """

        self._firewall_profile = firewall_profile

    @property
    def ip_addr(self) -> str:
        """Gets the ip_addr of this GigInterfaceConfig.


        :return: The ip_addr of this GigInterfaceConfig.
        :rtype: str
        """
        return self._ip_addr

    @ip_addr.setter
    def ip_addr(self, ip_addr: str):
        """Sets the ip_addr of this GigInterfaceConfig.


        :param ip_addr: The ip_addr of this GigInterfaceConfig.
        :type ip_addr: str
        """

        self._ip_addr = ip_addr
