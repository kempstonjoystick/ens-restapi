# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LTEInterfaceProtoModemInfoHardware(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, manufacturer: str=None, model: str=None, revision: str=None, supported: List[str]=None, current: List[str]=None, equipment_id: str=None):  # noqa: E501
        """LTEInterfaceProtoModemInfoHardware - a model defined in Swagger

        :param manufacturer: The manufacturer of this LTEInterfaceProtoModemInfoHardware.  # noqa: E501
        :type manufacturer: str
        :param model: The model of this LTEInterfaceProtoModemInfoHardware.  # noqa: E501
        :type model: str
        :param revision: The revision of this LTEInterfaceProtoModemInfoHardware.  # noqa: E501
        :type revision: str
        :param supported: The supported of this LTEInterfaceProtoModemInfoHardware.  # noqa: E501
        :type supported: List[str]
        :param current: The current of this LTEInterfaceProtoModemInfoHardware.  # noqa: E501
        :type current: List[str]
        :param equipment_id: The equipment_id of this LTEInterfaceProtoModemInfoHardware.  # noqa: E501
        :type equipment_id: str
        """
        self.swagger_types = {
            'manufacturer': str,
            'model': str,
            'revision': str,
            'supported': List[str],
            'current': List[str],
            'equipment_id': str
        }

        self.attribute_map = {
            'manufacturer': 'manufacturer',
            'model': 'model',
            'revision': 'revision',
            'supported': 'supported',
            'current': 'current',
            'equipment_id': 'equipment_id'
        }

        self._manufacturer = manufacturer
        self._model = model
        self._revision = revision
        self._supported = supported
        self._current = current
        self._equipment_id = equipment_id

    @classmethod
    def from_dict(cls, dikt) -> 'LTEInterfaceProtoModemInfoHardware':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LTEInterfaceProtoModemInfoHardware of this LTEInterfaceProtoModemInfoHardware.  # noqa: E501
        :rtype: LTEInterfaceProtoModemInfoHardware
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manufacturer(self) -> str:
        """Gets the manufacturer of this LTEInterfaceProtoModemInfoHardware.


        :return: The manufacturer of this LTEInterfaceProtoModemInfoHardware.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer: str):
        """Sets the manufacturer of this LTEInterfaceProtoModemInfoHardware.


        :param manufacturer: The manufacturer of this LTEInterfaceProtoModemInfoHardware.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self) -> str:
        """Gets the model of this LTEInterfaceProtoModemInfoHardware.


        :return: The model of this LTEInterfaceProtoModemInfoHardware.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this LTEInterfaceProtoModemInfoHardware.


        :param model: The model of this LTEInterfaceProtoModemInfoHardware.
        :type model: str
        """

        self._model = model

    @property
    def revision(self) -> str:
        """Gets the revision of this LTEInterfaceProtoModemInfoHardware.


        :return: The revision of this LTEInterfaceProtoModemInfoHardware.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision: str):
        """Sets the revision of this LTEInterfaceProtoModemInfoHardware.


        :param revision: The revision of this LTEInterfaceProtoModemInfoHardware.
        :type revision: str
        """

        self._revision = revision

    @property
    def supported(self) -> List[str]:
        """Gets the supported of this LTEInterfaceProtoModemInfoHardware.


        :return: The supported of this LTEInterfaceProtoModemInfoHardware.
        :rtype: List[str]
        """
        return self._supported

    @supported.setter
    def supported(self, supported: List[str]):
        """Sets the supported of this LTEInterfaceProtoModemInfoHardware.


        :param supported: The supported of this LTEInterfaceProtoModemInfoHardware.
        :type supported: List[str]
        """

        self._supported = supported

    @property
    def current(self) -> List[str]:
        """Gets the current of this LTEInterfaceProtoModemInfoHardware.


        :return: The current of this LTEInterfaceProtoModemInfoHardware.
        :rtype: List[str]
        """
        return self._current

    @current.setter
    def current(self, current: List[str]):
        """Sets the current of this LTEInterfaceProtoModemInfoHardware.


        :param current: The current of this LTEInterfaceProtoModemInfoHardware.
        :type current: List[str]
        """

        self._current = current

    @property
    def equipment_id(self) -> str:
        """Gets the equipment_id of this LTEInterfaceProtoModemInfoHardware.


        :return: The equipment_id of this LTEInterfaceProtoModemInfoHardware.
        :rtype: str
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id: str):
        """Sets the equipment_id of this LTEInterfaceProtoModemInfoHardware.


        :param equipment_id: The equipment_id of this LTEInterfaceProtoModemInfoHardware.
        :type equipment_id: str
        """

        self._equipment_id = equipment_id
